{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darko\\\\Desktop\\\\01-starting-project\\\\src\\\\components\\\\UI\\\\Input.js\";\n//Ovaj fajl je odgovoran za prikaz input polja\nimport React from \"react\";\nimport styles from \"./Input.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Input = /*#__PURE__*/React.forwardRef(_c = (props, ref) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.input,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.input.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: ref,\n      ...props.input\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n});\n_c2 = Input;\nexport default Input; //Kad koristim ...props.input to mi omogucava da svi parovi key-value koji primimo preko props.inputa budu dodati kao props u input\n//Tipa ako imam objekat {type: \"text\"}, ovaj spread operator(...props.input) mi omogucava da ce biti dodato type=\"text\"\n//To isto mogu da uradim i sa id-jem, da ga spread operator doda kao props u input\n//Posto ovde stoji props.label, znaci da u fajlu gde budem ubacio Input komponentu, moram joj staviti label, kao i input\n//Ako hocu ref, ovde stavim kao drugi parametar ref i stavim React.forwardRef i prosledim u input tagu ref={ref}\n//Da bih ovo mogao da uradim, moram da imam u komponenti u kojoj mi se nalazi komponenta Input ref={neka_funkcija}. Ta f-ja je jednaka useRef() koji uvezem iz react biblioteke\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Input$React.forwardRef\");\n$RefreshReg$(_c2, \"Input\");","map":{"version":3,"sources":["C:/Users/Darko/Desktop/01-starting-project/src/components/UI/Input.js"],"names":["React","styles","Input","forwardRef","props","ref","input","id","label"],"mappings":";AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;;AAEA,MAAMC,KAAK,gBAAGF,KAAK,CAACG,UAAN,MAAiB,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC7C,sBACE;AAAK,IAAA,SAAS,EAAEJ,MAAM,CAACK,KAAvB;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEF,KAAK,CAACE,KAAN,CAAYC,EAA5B;AAAA,gBAAiCH,KAAK,CAACI;AAAvC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAO,MAAA,GAAG,EAAEH,GAAZ;AAAA,SAAqBD,KAAK,CAACE;AAA3B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CAPa,CAAd;MAAMJ,K;AASN,eAAeA,KAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["//Ovaj fajl je odgovoran za prikaz input polja\r\nimport React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst Input = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className={styles.input}>\r\n      <label htmlFor={props.input.id}>{props.label}</label>\r\n      <input ref={ref} {...props.input} />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Input;\r\n\r\n//Kad koristim ...props.input to mi omogucava da svi parovi key-value koji primimo preko props.inputa budu dodati kao props u input\r\n//Tipa ako imam objekat {type: \"text\"}, ovaj spread operator(...props.input) mi omogucava da ce biti dodato type=\"text\"\r\n//To isto mogu da uradim i sa id-jem, da ga spread operator doda kao props u input\r\n//Posto ovde stoji props.label, znaci da u fajlu gde budem ubacio Input komponentu, moram joj staviti label, kao i input\r\n\r\n//Ako hocu ref, ovde stavim kao drugi parametar ref i stavim React.forwardRef i prosledim u input tagu ref={ref}\r\n//Da bih ovo mogao da uradim, moram da imam u komponenti u kojoj mi se nalazi komponenta Input ref={neka_funkcija}. Ta f-ja je jednaka useRef() koji uvezem iz react biblioteke\r\n"]},"metadata":{},"sourceType":"module"}